Node *parseReturnStmt() {
    Node *node = createNode("<return_stmt>");
    
    if (peekToken()->type == RETURN_TOKEN) {
        // Add 'returns' token to AST
        addChild(node, createNode(peekToken()->value));
        advanceToken();
        
        // Check if there's an expression after 'returns'
        if (peekToken()->type != SEMICOLON) {
            // Parse the expression
            Node *expr = parseExpression();
            if (expr) {
                addChild(node, expr);
                
                // Check for semicolon
                if (peekToken()->type == SEMICOLON) {
                    advanceToken();
                } else {
                    errorMessage("Expected ';' after return expression");
                    addChild(node, createNode("Error"));
                    errorRecovery();
                    hasError = 1;
                }
            } else {
                errorMessage("Invalid expression in return statement");
                addChild(node, createNode("Error"));
                errorRecovery();
                hasError = 1;
            }
        } else {
            // Handle case of 'returns;' with no expression
            advanceToken(); // consume semicolon
        }
    } else {
        errorMessage("Expected 'returns' keyword");
        addChild(node, createNode("Error"));
        errorRecovery();
        hasError = 1;
    }
    
    return node;
}
