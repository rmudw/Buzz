Node *parseStmt() {
    Node *node = createNode("<stmt>");
    
    if (peekToken()->type == GATHER_TOKEN) {
        return parseInputStmt();
    } else if (peekToken()->type == VAR_IDENT) {
        return parseAssignStmt();
    } else if (peekToken()->type == BUZZOUT_TOKEN) {
        return parseOutputStmt();
    } else if (peekToken()->type == IF_TOKEN || peekToken()->type == SWITCH_TOKEN) {
        return parseCondStmt();
    } else if (peekToken()->type == WHILE_TOKEN || peekToken()->type == FOR_TOKEN || peekToken()->type == DO_TOKEN) {
        return parseIterStmt();
    } else if (peekToken()->type == INT_TOKEN || peekToken()->type == FLOAT_TOKEN || 
               peekToken()->type == CHAR_TOKEN || peekToken()->type == CHAIN_TOKEN || 
               peekToken()->type == BOOL_TOKEN) {
        return parseDeclarationStmt();
    } else if (peekToken()->type == RETURN_TOKEN) {
        return parseReturnStmt();
    } else {
        errorMessage("Invalid statement");
        errorRecovery();
        hasError = 1;
        addChild(node, createNode("Error"));
    }

    return node;
}
