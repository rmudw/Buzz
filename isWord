int isWord(char *lexeme, char ch, int *type) {
    int i = 0;

    switch (lexeme[i]) {
        case 'b':
            if (lexeme[i + 1] == 'e' && 
                lexeme[i + 2] == 'e') {
                if (lexeme[i + 3] == 'g') {
                    if (lexeme[i + 4] == 'i' &&
                        lexeme[i + 5] == 'n' && 
                        lexeme[i + 6] == '\0') {
                        *type = BEEGIN_TOKEN;
                        return 1;
                    }
                    else if (lexeme[i + 4] == 'o' &&
                            lexeme[i + 5] == 'n' &&
                            lexeme[i + 6] == 'e' &&
                            lexeme[i + 7] == '\0') {
                        *type = BEEGONE_TOKEN;
                        return 1;
                    }
                }
            }
            else if (lexeme[i + 1] == 'u' &&
                     lexeme[i + 2] == 'z' &&
                     lexeme[i + 3] == 'z') {
                if (lexeme[i + 4] == '\0') {
                    *type = BUZZ_TOKEN;
                    return 1;
                }
                else if (lexeme[i + 4] == 'o' &&
                         lexeme[i + 5] == 'u' &&
                         lexeme[i + 6] == 't' &&
                         lexeme[i + 7] == '\0') {
                    *type = BUZZOUT_TOKEN;
                    return 1;
                }
            }
            else if (lexeme[i + 1] == 'o' && 
                     lexeme[i + 2] == 'o' && 
                     lexeme[i + 3] == 'l' && 
                     lexeme[i + 4] == '\0') {
                *type = BOOL_TOKEN;
                return 1;
            }
            break;

        case 'c':
            if (lexeme[i + 1] == 'a' &&
                lexeme[i + 2] == 's' &&
                lexeme[i + 3] == 'e' &&
                lexeme[i + 4] == '\0') {
                *type = CASE_TOKEN;
                return 1;
            }
            else if (lexeme[i + 1] == 'h' && 
                     lexeme[i + 2] == 'a') {
                if (lexeme[i + 3] == 'i' && 
                    lexeme[i + 4] == 'n' && 
                    lexeme[i + 5] == '\0') {
                    *type = CHAIN_TOKEN;
                    return 1;
                }
                else if (lexeme[i + 3] == 'r' && 
                         lexeme[i + 4] == '\0') {
                    *type = CHAR_TOKEN;
                    return 1;
                }
            }
            break;

        case 'd':
            if (lexeme[i + 1] == 'e' &&
                lexeme[i + 2] == 'f' &&
                lexeme[i + 3] == 'a' &&
                lexeme[i + 4] == 'u' &&
                lexeme[i + 5] == 'l' &&
                lexeme[i + 6] == 't' &&
                lexeme[i + 7] == '\0') {
                *type = DEFAULT_TOKEN;
                return 1;
            }
            else if (lexeme[i + 1] == 'o' &&
                     lexeme[i + 2] == '\0') {
                *type = DO_TOKEN;
                return 1;
            }
            break;

        case 'e':
            if (lexeme[i + 1] == 'l' &&
                lexeme[i + 2] == 's' &&
                lexeme[i + 3] == 'e') {
                if (lexeme[i + 4] == '\0') {
                    *type = ELSE_TOKEN;
                    return 1;
                }
                else if (lexeme[i + 4] == 'i' &&
                         lexeme[i + 5] == 'f' &&
                         lexeme[i + 6] == '\0') {
                    *type = ELSEIF_TOKEN;
                    return 1;
                }
            }
            break;

        case 'f':
            if (lexeme[i + 1] == 'a' && 
                lexeme[i + 2] == 'l' && 
                lexeme[i + 3] == 's' && 
                lexeme[i + 4] == 'e' && 
                lexeme[i + 5] == '\0') {
                *type = FALSE_TOKEN;
                return 1;
            }
            else if (lexeme[i + 1] == 'l' && 
                     lexeme[i + 2] == 'o' && 
                     lexeme[i + 3] == 'a' && 
                     lexeme[i + 4] == 't' && 
                     lexeme[i + 5] == '\0') {
                *type = FLOAT_TOKEN;
                return 1;
            }
            else if (lexeme[i + 1] == 'o' && 
                     lexeme[i + 2] == 'r' && 
                     lexeme[i + 3] == '\0') {
                *type = FOR_TOKEN;
                return 1;
            }
            break;

        case 'g':
            if (lexeme[i + 1] == 'a' &&
                lexeme[i + 2] == 't' &&
                lexeme[i + 3] == 'h' &&
                lexeme[i + 4] == 'e' &&
                lexeme[i + 5] == 'r' &&
                lexeme[i + 6] == '\0') {
                *type = GATHER_TOKEN;
                return 1;
            }
            break;

        case 'h':
            if (lexeme[i + 1] == 'i' &&
                lexeme[i + 2] == 'v' &&
                lexeme[i + 3] == 'e' &&
                lexeme[i + 4] == '\0') {
                *type = HIVE_TOKEN;
                return 1;
            }
            else if (lexeme[i + 1] == 'o' &&
                     lexeme[i + 2] == 'v' &&
                     lexeme[i + 3] == 'e' &&
                     lexeme[i + 4] == 'r' &&
                     lexeme[i + 5] == '\0') {
                *type = HOVER_TOKEN;
                return 1;
            }
            break;

        case 'i':
            if (lexeme[i + 1] == 'n' && 
                lexeme[i + 2] == 't' && 
                lexeme[i + 3] == '\0') {
                *type = INT_TOKEN;
                return 1;
            }
            else if (lexeme[i + 1] == 'f' &&
                     lexeme[i + 2] == '\0') {
                *type = IF_TOKEN;
                return 1;
            }
            break;

        case 'q':
            if (lexeme[i + 1] == 'u' &&
                lexeme[i + 2] == 'e' &&
                lexeme[i + 3] == 'e' &&
                lexeme[i + 4] == 'n' &&
                lexeme[i + 5] == 'b' &&
                lexeme[i + 6] == 'e' &&
                lexeme[i + 7] == 'e' &&
                lexeme[i + 8] == '\0') {
                *type = QUEENBEE_TOKEN;
                return 1;
            }
            break;

        case 'r':
            if (lexeme[i + 1] == 'e' &&
                lexeme[i + 2] == 't' &&
                lexeme[i + 3] == 'u' &&
                lexeme[i + 4] == 'r' &&
                lexeme[i + 5] == 'n' &&
                lexeme[i + 6] == '\0') {
                *type = RETURN_TOKEN;
                return 1;
            } else if (lexeme[i + 6] == 'v' &&
                       lexeme[i + 7] == 'a' &&
                       lexeme[i + 8] == 'l' &&
                       lexeme[i + 9] == 'u' &&
                       lexeme[i + 10] == 'e' &&
                       lexeme[i + 11] == '\0'){
                         *type = NOISE_WORD;
                       }
            break;

        case 's':
            if (lexeme[i + 1] == 't' &&
                lexeme[i + 2] == 'i' &&
                lexeme[i + 3] == 'n' &&
                lexeme[i + 4] == 'g' &&
                lexeme[i + 5] == '\0') {
                *type = STING_TOKEN;
                return 1;
            }
            else if (lexeme[i + 1] == 'w' &&
                     lexeme[i + 2] == 'i' &&
                     lexeme[i + 3] == 't' &&
                     lexeme[i + 4] == 'c' &&
                     lexeme[i + 5] == 'h' &&
                     lexeme[i + 6] == '\0') {
                *type = SWITCH_TOKEN;
                return 1;
            }
            break;

        case 'w':
            if (lexeme[i + 1] == 'h' &&
                lexeme[i + 2] == 'i' &&
                lexeme[i + 3] == 'l' &&
                lexeme[i + 4] == 'e' &&
                lexeme[i + 5] == '\0') {
                *type = WHILE_TOKEN;
                return 1;
            }
            break;

        default:
            *type = INVALID_TOKEN;
            return 0;
    }

    return 0; // Not a keyword or reserved word
}
